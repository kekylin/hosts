name: hosts

on:
  schedule:
    - cron: '0 0,6,12,18 * * *'

  workflow_dispatch:
    inputs:
      dns:
        description: 'DNS'
        required: true
        default: 'Aliyun'
        type: choice
        options:
        - 'Google'
        - 'OpenDNS'
        - 'AT&T'
        - 'Sunrise'
        - 'Aliyun'
        - 'LG'
        - 'IONICA'

jobs:
  hosts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
     
      - name: Set up Python 3
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Init Env
        run : |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Shanghai"
          python -m pip install --upgrade pip setuptools
          python -m pip install urllib3
          
      - name: Get Github Hosts
        shell: python
        run: |
          import os, time, json, urllib3, re

          def is_valid_ip(ip, v6=False):
              ipv4_pattern = r'^(\d{1,3}\.){3}\d{1,3}$'
              ipv6_pattern = r'^([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}$'
              if v6:
                  return re.match(ipv6_pattern, ip) is not None
              else:
                  return re.match(ipv4_pattern, ip) is not None

          class dnsChecker():
              def __init__(self) -> None:
                  self.dnsServers = {
                      "Google": {
                          "idx": "4",
                          "provider": " Google",
                          "location": "Mountain View CA, United States",
                          "country": "us"
                      },
                      "OpenDNS": {
                          "idx": "1",
                          "provider": " OpenDNS",
                          "location": "Holtsville NY, United States",
                          "country": "us"
                      },
                      "AT&T": {
                          "idx": "72",
                          "provider": "AT&T Services",
                          "location": "Miami, United States",
                          "country": "us"
                      },
                      "Sunrise": {
                          "idx": "363",
                          "provider": "Shenzhen Sunrise Technology Co. Ltd",
                          "location": "Shenzhen, China",
                          "country": "cn"
                      },
                      "Aliyun": {
                          "idx": "364",
                          "provider": "Aliyun Computing Co. Ltd",
                          "location": "Hangzhou, China",
                          "country": "cn"
                      },
                      "LG": {
                          "idx": "336",
                          "provider": "LG Dacom Corporation",
                          "location": "Seoul, South Korea",
                          "country": "kr"
                      },
                      "IONICA": {
                          "idx": "13",
                          "provider": "IONICA LLC",
                          "location": "Ramenskoye, Russia",
                          "country": "ru"
                      }
                  }
                  self.dnsidx = self.dnsServers['Sunrise']['idx']
                  self.headers = {
                      'accept': 'application/json, text/javascript, */*; q=0.01',
                      'content-type': 'application/x-www-form-urlencoded; charset=UTF-8', 
                      'x-requested-with': 'XMLHttpRequest',
                      'origin': 'https://dnschecker.org',
                      'referer': 'https://dnschecker.org/',
                  }
                  self.PM = urllib3.PoolManager()
                  url = 'https://dnschecker.org/ajax_files/gen_csrf.php'
                  res = self.PM.request('POST', url, headers=self.headers)
                  if res.status == 200:
                      data = json.loads(res.data.decode('utf-8'))
                      if data and 'csrf' in data:
                          self.headers['csrftoken'] = data['csrf']

              def setServers(self, servers=''):
                  if servers in self.dnsServers:
                      self.dnsidx = self.dnsServers[servers]['idx']

              def getServers(self, servers=''):
                  if servers == '': 
                      for i in self.dnsServers:
                          if self.dnsServers[i]['idx'] == self.dnsidx:
                              servers = i
                  return self.dnsServers.get(servers, None)
              
              def check(self, qname='', rdtype='A', servers=''):
                  servers = servers or self.dnsidx
                  ret, ips = False, []
                  try:
                      url = f'https://dnschecker.org/ajax_files/api/{servers}/{rdtype}/{qname}?upd=500.000'
                      res = self.PM.request('POST', url, headers=self.headers)
                      if res.status == 200:
                          data = json.loads(res.data.decode('utf-8'))
                          if data and 'result' in data and 'ips' in data['result']:
                              ips = [ip.strip() for ip in data['result']['ips'].split('<br />') if ip.strip()]
                              ret = bool(ips)
                  except Exception as err:
                      print(f"DNS Query Error: {err}")
                  return ret, ips

          if __name__ == '__main__':
              gitHubDoMains = [
                  "github.io",
                  "github.com",
                  "github.blog",
                  "github.community",
                  "api.github.com",
                  "api.githubcopilot.com",
                  "gist.github.com",
                  "codeload.github.com",
                  "central.github.com",
                  "collector.github.com",
                  "raw.github.com",
                  "docs.github.com",
                  "assets-cdn.github.com",
                  "raw.githubusercontent.com",
                  "camo.githubusercontent.com",
                  "cloud.githubusercontent.com",
                  "media.githubusercontent.com",
                  "desktop.githubusercontent.com",
                  "objects.githubusercontent.com",
                  "favicons.githubusercontent.com",
                  "avatars5.githubusercontent.com",
                  "avatars4.githubusercontent.com",
                  "avatars3.githubusercontent.com",
                  "avatars2.githubusercontent.com",
                  "avatars1.githubusercontent.com",
                  "avatars0.githubusercontent.com",
                  "avatars.githubusercontent.com",
                  "user-images.githubusercontent.com",
                  "copilot-proxy.githubusercontent.com",
                  "github-releases.githubusercontent.com",
                  "pipelines.actions.githubusercontent.com",
                  "pipelinesghubeus7.actions.githubusercontent.com",
                  "githubstatus.com",
                  "collector.githubapp.com",
                  "github.githubassets.com",
                  "analytics.githubassets.com",
                  "github.map.fastly.net",
                  "github.global.ssl.fastly.net",
                  "github-cloud.s3.amazonaws.com",
                  "github-com.s3.amazonaws.com",
                  "github-production-release-asset-2e65be.s3.amazonaws.com",
                  "github-production-user-asset-6210df.s3.amazonaws.com",
                  "github-production-repository-file-5c1aeb.s3.amazonaws.com"
              ]
              
              dockerDoMains = [
                  "registry.hub.docker.com",
                  "hub.docker.com",
                  "index.docker.io",
                  "ghcr.io",
                  "gcr.io",
                  "k8s.gcr.io",
                  "quay.io"
              ]
              
              tmdbDoMains = [
                  "themoviedb.org",
                  "www.themoviedb.org",
                  "api.themoviedb.org",
                  "tmdb.org",
                  "api.tmdb.org",
                  "image.tmdb.org",
                  "opensubtitles.org",
                  "www.opensubtitles.org",
                  "api.opensubtitles.org",
                  "assets.fanart.tv"
              ]
              
              dnsobj = dnsChecker()
              dnsservers = 'Aliyun' if '${{ inputs.dns }}' == '' else '${{ inputs.dns }}'
              dnsobj.setServers(dnsservers)

              dnsList = [
                  '# Kekylin Hosts Start',
                  '# Raw Url: https://raw.githubusercontent.com/kekylin/hosts/main/hosts',
                  f'# DNS Servers: {dnsobj.getServers()["provider"]}',
                  f'# Update at: {time.strftime("%Y-%m-%d %H:%M:%S")}'
              ]

              def process_domains(domains, section_name):
                  dnsList.append(f'# {section_name} Hosts Start')
                  for domain in domains:
                      ret_a, ips_a = dnsobj.check(domain, 'A')
                      if ret_a:
                          valid_ips = [ip for ip in ips_a if is_valid_ip(ip)]
                          if valid_ips:
                              dnsList.append(f'{valid_ips[0].ljust(16)}{domain}')
                      ret_aaaa, ips_aaaa = dnsobj.check(domain, 'AAAA')
                      if ret_aaaa:
                          valid_ips_v6 = [ip for ip in ips_aaaa if is_valid_ip(ip, v6=True)]
                          if valid_ips_v6:
                              dnsList.append(f'{valid_ips_v6[0].ljust(40)}{domain}')
                  dnsList.append(f'# {section_name} Hosts End')

              process_domains(gitHubDoMains, 'GitHub')
              process_domains(dockerDoMains, 'Docker')
              process_domains(tmdbDoMains, 'TMDB')
              dnsList.append('# Kekylin Hosts End')

              with open('hosts', 'w', encoding="utf-8") as f:
                  f.write('\n'.join(dnsList))

      - name: Check and Push
        run: |
          if [ -n "$(git status -s | grep hosts)" ]; then
            git add hosts
            git commit -m "update $(date +%Y-%m-%d" "%H:%M:%S)"
            git push -f
          fi
